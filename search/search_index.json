{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Solution Projectile Motion Analysis Introduction This project analyzes the horizontal range of a projectile as a function of the angle of projection. Using fundamental physics equations, the script computes and visualizes the range for various angles, highlighting the optimal angle for maximum range. Governing Equations The horizontal range \\(R\\) of a projectile is defined as: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] where: - \\(v_0\\) : Initial velocity \\(m/s\\) . - \\(\\theta\\) : Angle of projection degrees. - \\(g\\) : Acceleration due to gravity \\(9.81 m/s^2\\) . This equation assumes ideal conditions, neglecting air resistance and other real-world factors. Python Implementation import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # Gravitational acceleration (m/s^2) v0 = 50 # Initial velocity (m/s) # Function to calculate range def calculate_range(angle): theta = np.radians(angle) # Convert angle to radians return (v0**2 * np.sin(2 * theta)) / g # Angles (0 to 90 degrees) angles = np.linspace(0, 90, 500) ranges = [calculate_range(angle) for angle in angles] # Plotting plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, label='Range vs Angle') plt.title('Range as a Function of the Angle of Projection') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.axvline(45, color='red', linestyle='--', label='Optimal Angle (45\u00b0)') plt.legend() plt.grid() plt.show() # Additional Output optimal_range = calculate_range(45) print(f\"The optimal range is {optimal_range:.2f} meters at a projection angle of 45 degrees.\") Results The plot generated by the script shows the range of the projectile for angles from 0 to 90 degrees. The optimal angle for maximum range is highlighted at 45 degrees. The corresponding maximum range is also displayed in the output. Limitations The analysis assumes no air resistance, which is not realistic in many practical scenarios. The ground is assumed to be flat and at the same level as the launch point. Possible Extensions Incorporate air resistance into the calculations. Analyze the effect of varying initial velocity and gravitational acceleration. Simulate projectile motion in 3D or over uneven terrain.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#solution","text":"","title":"Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-analysis","text":"","title":"Projectile Motion Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#introduction","text":"This project analyzes the horizontal range of a projectile as a function of the angle of projection. Using fundamental physics equations, the script computes and visualizes the range for various angles, highlighting the optimal angle for maximum range.","title":"Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations","text":"The horizontal range \\(R\\) of a projectile is defined as: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] where: - \\(v_0\\) : Initial velocity \\(m/s\\) . - \\(\\theta\\) : Angle of projection degrees. - \\(g\\) : Acceleration due to gravity \\(9.81 m/s^2\\) . This equation assumes ideal conditions, neglecting air resistance and other real-world factors.","title":"Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-implementation","text":"import numpy as np import matplotlib.pyplot as plt # Constants g = 9.81 # Gravitational acceleration (m/s^2) v0 = 50 # Initial velocity (m/s) # Function to calculate range def calculate_range(angle): theta = np.radians(angle) # Convert angle to radians return (v0**2 * np.sin(2 * theta)) / g # Angles (0 to 90 degrees) angles = np.linspace(0, 90, 500) ranges = [calculate_range(angle) for angle in angles] # Plotting plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, label='Range vs Angle') plt.title('Range as a Function of the Angle of Projection') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.axvline(45, color='red', linestyle='--', label='Optimal Angle (45\u00b0)') plt.legend() plt.grid() plt.show() # Additional Output optimal_range = calculate_range(45) print(f\"The optimal range is {optimal_range:.2f} meters at a projection angle of 45 degrees.\")","title":"Python Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#results","text":"The plot generated by the script shows the range of the projectile for angles from 0 to 90 degrees. The optimal angle for maximum range is highlighted at 45 degrees. The corresponding maximum range is also displayed in the output.","title":"Results"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations","text":"The analysis assumes no air resistance, which is not realistic in many practical scenarios. The ground is assumed to be flat and at the same level as the launch point.","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#possible-extensions","text":"Incorporate air resistance into the calculations. Analyze the effect of varying initial velocity and gravitational acceleration. Simulate projectile motion in 3D or over uneven terrain.","title":"Possible Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Solution Theoretical Foundation for the Forced Damped Pendulum 1. Differential Equation Governing the Motion The motion of the forced damped pendulum is governed by the following second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t) \\] where: - \\( \\(\\theta(t)\\) \\) : Angular displacement of the pendulum at time \\( \\(t\\) \\) (in radians). - \\( \\(\\frac{d^2\\theta}{dt^2}\\) \\) : Angular acceleration. - \\( \\(\\frac{d\\theta}{dt}\\) \\) : Angular velocity. - \\( \\(b\\) \\) : Damping coefficient (describing resistive forces like air drag or friction). - \\( \\(\\frac{g}{L}\\) \\) : Restoring force per unit angular displacement ( \\( \\(g\\) \\) is gravitational acceleration and \\( \\(L\\) \\) is pendulum length). - \\( \\(A\\cos(\\omega t)\\) \\) : External periodic driving force with amplitude \\( \\(A\\) \\) and angular frequency \\( \\(\\omega\\) \\) . This equation captures the combined effects of: 1. The restoring torque \\( \\(-\\frac{g}{L}\\sin\\theta\\) \\) . 2. Damping torque \\( \\(-b\\frac{d\\theta}{dt}\\) \\) . 3. Driving torque \\( \\(A\\cos(\\omega t)\\) \\) . 2. Approximate Solutions for Small-Angle Oscillations For small angular displacements ( \\( \\(\\theta \\ll 1\\) \\) ), we can use the small-angle approximation: \\[ \\sin\\theta \\approx \\theta \\] Substituting this approximation into the governing equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] This is now a linear differential equation that can be solved analytically. Solution of the Linearized Equation The solution consists of two parts: 1. Transient Solution : Depends on initial conditions and decays due to damping ( \\( \\(b\\) \\) ). 2. Steady-State Solution : A sinusoidal solution synchronized with the driving force. Let the steady-state solution be: \\[ \\theta(t) = \\Theta \\cos(\\omega t - \\phi) \\] where: - \\( \\(\\Theta\\) \\) : Amplitude of oscillation. - \\( \\(\\phi\\) \\) : Phase difference between the driving force and pendulum motion. Substitute this into the linearized equation: \\[ -\\omega^2\\Theta\\cos(\\omega t - \\phi) + b\\omega\\Theta\\sin(\\omega t - \\phi) + \\frac{g}{L}\\Theta\\cos(\\omega t - \\phi) = A\\cos(\\omega t) \\] Using trigonometric identities and matching coefficients, the amplitude \\( \\(\\Theta\\) \\) is: \\[ \\Theta = \\frac{A}{\\sqrt{\\left(\\frac{g}{L} - \\omega^2\\right)^2 + (b\\omega)^2}} \\] and the phase difference \\( \\(\\phi\\) \\) is: \\[ \\tan\\phi = \\frac{b\\omega}{\\frac{g}{L} - \\omega^2} \\] Interpretation \\( \\(\\Theta\\) \\) : Depends on the driving frequency \\( \\(\\omega\\) \\) , damping \\( \\(b\\) \\) , and natural frequency \\( \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) \\) . \\( \\(\\phi\\) \\) : Indicates how the motion lags behind the driving force. 3. Resonance Conditions and Energy Implications Resonance Condition Resonance occurs when the driving frequency \\( \\(\\omega\\) \\) matches the natural frequency \\( \\(\\omega_0\\) \\) : \\[ \\omega = \\omega_0 = \\sqrt{\\frac{g}{L}} \\] At resonance, the denominator of the amplitude equation is minimized: \\[ \\Theta_{\\text{resonance}} = \\frac{A}{b\\omega_0} \\] This results in a maximum amplitude of oscillation, limited only by damping ( \\( \\(b\\) \\) ). Implications for System's Energy Energy Transfer : At resonance, the driving force is perfectly in phase with the pendulum's motion, allowing maximum energy transfer. Large Amplitudes : Without damping ( \\( \\(b = 0\\) \\) ), the amplitude \\( \\(\\Theta\\) \\) would grow indefinitely at resonance, causing instability. However, damping dissipates energy and limits amplitude. Practical Systems : Mechanical Systems : Resonance can lead to catastrophic failures (e.g., bridge oscillations). Energy Harvesting : Resonance can be exploited for efficient energy transfer in devices like pendulum-based generators. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravitational acceleration (m/s^2) L = 1.0 # length of the pendulum (m) b = 0.5 # damping coefficient A = 1.5 # driving force amplitude omega = 2.0 # driving force frequency # Differential equation def forced_damped_pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -(b * omega_dot + (g / L) * np.sin(theta)) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Time span and initial conditions t_span = (0, 50) # simulate from t=0 to t=50 seconds t_eval = np.linspace(*t_span, 10000) # time points for evaluation y0 = [0.1, 0] # initial angle (radians) and angular velocity (rad/s) # Solve the differential equation solution = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, method=\"RK45\") # Extract results t = solution.t theta = solution.y[0] omega_dot = solution.y[1] # Plotting results plt.figure(figsize=(12, 8)) # Time series plot plt.subplot(3, 1, 1) plt.plot(t, theta, label=\"Theta (angle)\") plt.plot(t, omega_dot, label=\"Angular velocity\") plt.title(\"Time Series of the Forced Damped Pendulum\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Amplitude\") plt.legend() plt.grid() # Phase portrait plt.subplot(3, 1, 2) plt.plot(theta, omega_dot, label=\"Phase Portrait\") plt.title(\"Phase Portrait\") plt.xlabel(\"Theta (angle)\") plt.ylabel(\"Angular velocity\") plt.legend() plt.grid() # Poincar\u00e9 section def poincare_section(theta, omega_dot, time, period): poincare_theta = [] poincare_omega = [] for i in range(1, len(time) - 1): if abs(time[i] % period - 0) < (time[1] - time[0]): poincare_theta.append(theta[i]) poincare_omega.append(omega_dot[i]) return poincare_theta, poincare_omega # Compute Poincar\u00e9 section T = 2 * np.pi / omega # period of the driving force poincare_theta, poincare_omega = poincare_section(theta, omega_dot, t, T) plt.subplot(3, 1, 3) plt.scatter(poincare_theta, poincare_omega, s=10, label=\"Poincar\u00e9 Section\", color=\"red\") plt.title(\"Poincar\u00e9 Section\") plt.xlabel(\"Theta (angle)\") plt.ylabel(\"Angular velocity\") plt.legend() plt.grid() plt.tight_layout() plt.show() # Bifurcation diagram (basic setup) def bifurcation_diagram(param_values, initial_conditions, t_span, t_eval): bifurcation_data = [] for param in param_values: global A A = param # vary the driving force amplitude solution = solve_ivp(forced_damped_pendulum, t_span, initial_conditions, t_eval=t_eval, method=\"RK45\") theta = solution.y[0] time = solution.t # Sample theta at driving force periods sampled_theta = [theta[i] for i in range(len(time)) if abs(time[i] % T - 0) < (time[1] - time[0])] bifurcation_data.append((param, sampled_theta)) return bifurcation_data # Parameters for bifurcation diagram param_values = np.linspace(0.5, 2.0, 50) # range of A values t_eval = np.linspace(0, 200, 20000) # longer simulation time bifurcation_data = bifurcation_diagram(param_values, y0, (0, 200), t_eval) # Plot bifurcation diagram plt.figure(figsize=(10, 6)) for param, sampled_theta in bifurcation_data: plt.scatter([param] * len(sampled_theta), sampled_theta, s=1, color=\"blue\") plt.title(\"Bifurcation Diagram\") plt.xlabel(\"Driving Force Amplitude (A)\") plt.ylabel(\"Theta (angle)\") plt.grid() plt.show() https://colab.research.google.com/drive/1z3rXVn59Yw0YD7s-eDadJzGF4U9LV8H7?usp=sharing","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solution","text":"","title":"Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation-for-the-forced-damped-pendulum","text":"","title":"Theoretical Foundation for the Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-differential-equation-governing-the-motion","text":"The motion of the forced damped pendulum is governed by the following second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t) \\] where: - \\( \\(\\theta(t)\\) \\) : Angular displacement of the pendulum at time \\( \\(t\\) \\) (in radians). - \\( \\(\\frac{d^2\\theta}{dt^2}\\) \\) : Angular acceleration. - \\( \\(\\frac{d\\theta}{dt}\\) \\) : Angular velocity. - \\( \\(b\\) \\) : Damping coefficient (describing resistive forces like air drag or friction). - \\( \\(\\frac{g}{L}\\) \\) : Restoring force per unit angular displacement ( \\( \\(g\\) \\) is gravitational acceleration and \\( \\(L\\) \\) is pendulum length). - \\( \\(A\\cos(\\omega t)\\) \\) : External periodic driving force with amplitude \\( \\(A\\) \\) and angular frequency \\( \\(\\omega\\) \\) . This equation captures the combined effects of: 1. The restoring torque \\( \\(-\\frac{g}{L}\\sin\\theta\\) \\) . 2. Damping torque \\( \\(-b\\frac{d\\theta}{dt}\\) \\) . 3. Driving torque \\( \\(A\\cos(\\omega t)\\) \\) .","title":"1. Differential Equation Governing the Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-approximate-solutions-for-small-angle-oscillations","text":"For small angular displacements ( \\( \\(\\theta \\ll 1\\) \\) ), we can use the small-angle approximation: \\[ \\sin\\theta \\approx \\theta \\] Substituting this approximation into the governing equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] This is now a linear differential equation that can be solved analytically.","title":"2. Approximate Solutions for Small-Angle Oscillations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#solution-of-the-linearized-equation","text":"The solution consists of two parts: 1. Transient Solution : Depends on initial conditions and decays due to damping ( \\( \\(b\\) \\) ). 2. Steady-State Solution : A sinusoidal solution synchronized with the driving force. Let the steady-state solution be: \\[ \\theta(t) = \\Theta \\cos(\\omega t - \\phi) \\] where: - \\( \\(\\Theta\\) \\) : Amplitude of oscillation. - \\( \\(\\phi\\) \\) : Phase difference between the driving force and pendulum motion. Substitute this into the linearized equation: \\[ -\\omega^2\\Theta\\cos(\\omega t - \\phi) + b\\omega\\Theta\\sin(\\omega t - \\phi) + \\frac{g}{L}\\Theta\\cos(\\omega t - \\phi) = A\\cos(\\omega t) \\] Using trigonometric identities and matching coefficients, the amplitude \\( \\(\\Theta\\) \\) is: \\[ \\Theta = \\frac{A}{\\sqrt{\\left(\\frac{g}{L} - \\omega^2\\right)^2 + (b\\omega)^2}} \\] and the phase difference \\( \\(\\phi\\) \\) is: \\[ \\tan\\phi = \\frac{b\\omega}{\\frac{g}{L} - \\omega^2} \\]","title":"Solution of the Linearized Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#interpretation","text":"\\( \\(\\Theta\\) \\) : Depends on the driving frequency \\( \\(\\omega\\) \\) , damping \\( \\(b\\) \\) , and natural frequency \\( \\(\\omega_0 = \\sqrt{\\frac{g}{L}}\\) \\) . \\( \\(\\phi\\) \\) : Indicates how the motion lags behind the driving force.","title":"Interpretation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-resonance-conditions-and-energy-implications","text":"","title":"3. Resonance Conditions and Energy Implications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the driving frequency \\( \\(\\omega\\) \\) matches the natural frequency \\( \\(\\omega_0\\) \\) : \\[ \\omega = \\omega_0 = \\sqrt{\\frac{g}{L}} \\] At resonance, the denominator of the amplitude equation is minimized: \\[ \\Theta_{\\text{resonance}} = \\frac{A}{b\\omega_0} \\] This results in a maximum amplitude of oscillation, limited only by damping ( \\( \\(b\\) \\) ).","title":"Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#implications-for-systems-energy","text":"Energy Transfer : At resonance, the driving force is perfectly in phase with the pendulum's motion, allowing maximum energy transfer. Large Amplitudes : Without damping ( \\( \\(b = 0\\) \\) ), the amplitude \\( \\(\\Theta\\) \\) would grow indefinitely at resonance, causing instability. However, damping dissipates energy and limits amplitude. Practical Systems : Mechanical Systems : Resonance can lead to catastrophic failures (e.g., bridge oscillations). Energy Harvesting : Resonance can be exploited for efficient energy transfer in devices like pendulum-based generators. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 # gravitational acceleration (m/s^2) L = 1.0 # length of the pendulum (m) b = 0.5 # damping coefficient A = 1.5 # driving force amplitude omega = 2.0 # driving force frequency # Differential equation def forced_damped_pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -(b * omega_dot + (g / L) * np.sin(theta)) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Time span and initial conditions t_span = (0, 50) # simulate from t=0 to t=50 seconds t_eval = np.linspace(*t_span, 10000) # time points for evaluation y0 = [0.1, 0] # initial angle (radians) and angular velocity (rad/s) # Solve the differential equation solution = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, method=\"RK45\") # Extract results t = solution.t theta = solution.y[0] omega_dot = solution.y[1] # Plotting results plt.figure(figsize=(12, 8)) # Time series plot plt.subplot(3, 1, 1) plt.plot(t, theta, label=\"Theta (angle)\") plt.plot(t, omega_dot, label=\"Angular velocity\") plt.title(\"Time Series of the Forced Damped Pendulum\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Amplitude\") plt.legend() plt.grid() # Phase portrait plt.subplot(3, 1, 2) plt.plot(theta, omega_dot, label=\"Phase Portrait\") plt.title(\"Phase Portrait\") plt.xlabel(\"Theta (angle)\") plt.ylabel(\"Angular velocity\") plt.legend() plt.grid() # Poincar\u00e9 section def poincare_section(theta, omega_dot, time, period): poincare_theta = [] poincare_omega = [] for i in range(1, len(time) - 1): if abs(time[i] % period - 0) < (time[1] - time[0]): poincare_theta.append(theta[i]) poincare_omega.append(omega_dot[i]) return poincare_theta, poincare_omega # Compute Poincar\u00e9 section T = 2 * np.pi / omega # period of the driving force poincare_theta, poincare_omega = poincare_section(theta, omega_dot, t, T) plt.subplot(3, 1, 3) plt.scatter(poincare_theta, poincare_omega, s=10, label=\"Poincar\u00e9 Section\", color=\"red\") plt.title(\"Poincar\u00e9 Section\") plt.xlabel(\"Theta (angle)\") plt.ylabel(\"Angular velocity\") plt.legend() plt.grid() plt.tight_layout() plt.show() # Bifurcation diagram (basic setup) def bifurcation_diagram(param_values, initial_conditions, t_span, t_eval): bifurcation_data = [] for param in param_values: global A A = param # vary the driving force amplitude solution = solve_ivp(forced_damped_pendulum, t_span, initial_conditions, t_eval=t_eval, method=\"RK45\") theta = solution.y[0] time = solution.t # Sample theta at driving force periods sampled_theta = [theta[i] for i in range(len(time)) if abs(time[i] % T - 0) < (time[1] - time[0])] bifurcation_data.append((param, sampled_theta)) return bifurcation_data # Parameters for bifurcation diagram param_values = np.linspace(0.5, 2.0, 50) # range of A values t_eval = np.linspace(0, 200, 20000) # longer simulation time bifurcation_data = bifurcation_diagram(param_values, y0, (0, 200), t_eval) # Plot bifurcation diagram plt.figure(figsize=(10, 6)) for param, sampled_theta in bifurcation_data: plt.scatter([param] * len(sampled_theta), sampled_theta, s=1, color=\"blue\") plt.title(\"Bifurcation Diagram\") plt.xlabel(\"Driving Force Amplitude (A)\") plt.ylabel(\"Theta (angle)\") plt.grid() plt.show() https://colab.research.google.com/drive/1z3rXVn59Yw0YD7s-eDadJzGF4U9LV8H7?usp=sharing","title":"Implications for System's Energy"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Derivation of Kepler's Third Law Step 1: Gravitational and Centripetal Forces Newton's Law of Gravitation: \\[ F_g = \\frac{G M m}{r^2} \\] Centripetal force for circular motion: \\[ F_c = m \\frac{v^2}{r} \\] Equating \\( \\(F_g = F_c\\) \\) : \\[ \\frac{G M m}{r^2} = m \\frac{v^2}{r} \\] Canceling \\( \\(m\\) \\) : \\[ \\frac{G M}{r^2} = \\frac{v^2}{r} \\] Multiplying by \\( \\(r\\) \\) : \\[ v^2 = \\frac{G M}{r} \\] Step 2: Expressing in Terms of Orbital Period Using \\( \\(v = \\frac{2\\pi r}{T}\\) \\) : \\[\\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{G M}{r}\\] \\[\\frac{4\\pi^2 r^2}{T^2} = \\frac{G M}{r}\\] Multiplying by \\( \\(r\\) \\) : \\[ 4\\pi^2 r^3 = G M T^2 \\] Step 3: Final Relation \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] Thus, \\[ T^2 \\propto r^3 \\] Implications of Kepler\u2019s Third Law in Astronomy Kepler\u2019s Third Law \\( \\(T^2 \\propto r^3\\) \\) plays a key role in understanding celestial mechanics. 1. Calculating Planetary Masses Using $$ M = \\frac{4\\pi^2 r^3}{G T^2} $$ we can determine the mass of a central body (e.g., the Sun, exoplanet host stars, or giant planets) by observing orbiting objects.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-keplers-third-law","text":"","title":"Derivation of Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-1-gravitational-and-centripetal-forces","text":"Newton's Law of Gravitation: \\[ F_g = \\frac{G M m}{r^2} \\] Centripetal force for circular motion: \\[ F_c = m \\frac{v^2}{r} \\] Equating \\( \\(F_g = F_c\\) \\) : \\[ \\frac{G M m}{r^2} = m \\frac{v^2}{r} \\] Canceling \\( \\(m\\) \\) : \\[ \\frac{G M}{r^2} = \\frac{v^2}{r} \\] Multiplying by \\( \\(r\\) \\) : \\[ v^2 = \\frac{G M}{r} \\]","title":"Step 1: Gravitational and Centripetal Forces"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-2-expressing-in-terms-of-orbital-period","text":"Using \\( \\(v = \\frac{2\\pi r}{T}\\) \\) : \\[\\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{G M}{r}\\] \\[\\frac{4\\pi^2 r^2}{T^2} = \\frac{G M}{r}\\] Multiplying by \\( \\(r\\) \\) : \\[ 4\\pi^2 r^3 = G M T^2 \\]","title":"Step 2: Expressing in Terms of Orbital Period"},{"location":"1%20Physics/2%20Gravity/Problem_1/#step-3-final-relation","text":"\\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] Thus, \\[ T^2 \\propto r^3 \\]","title":"Step 3: Final Relation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#implications-of-keplers-third-law-in-astronomy","text":"Kepler\u2019s Third Law \\( \\(T^2 \\propto r^3\\) \\) plays a key role in understanding celestial mechanics.","title":"Implications of Kepler\u2019s Third Law in Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-calculating-planetary-masses","text":"Using $$ M = \\frac{4\\pi^2 r^3}{G T^2} $$ we can determine the mass of a central body (e.g., the Sun, exoplanet host stars, or giant planets) by observing orbiting objects.","title":"1. Calculating Planetary Masses"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}